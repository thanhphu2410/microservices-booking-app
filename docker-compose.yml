version: '3.8'

services:
  auth-service:
    container_name: auth-service
    hostname: auth-service
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    volumes:
      - ./services/auth-service:/usr/src/app
    environment:
      - NODE_ENV=development
      - DB_HOST=${AUTH_DB_HOST}
      - DB_PORT=${AUTH_DB_PORT}
      - DB_USERNAME=${AUTH_DB_USERNAME}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
      - DB_NAME=${AUTH_DB_NAME}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - test-network
    depends_on:
      - postgres-auth

  notification-service:
    container_name: notification-service
    hostname: notification-service
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "50052:50052"
    volumes:
      - ./services/notification-service:/usr/src/app
    environment:
      - NODE_ENV=development
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - test-network
    depends_on:
      - rabbitmq

  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3005:3000"
    volumes:
      - ./services/api-gateway:/usr/src/app
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=auth-service:50051
      - MOVIE_SERVICE_URL=movie-service:50053
      - NOTIFICATION_SERVICE_URL=notification-service:50052
      - SEAT_SERVICE_URL=seat-service:50054
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - test-network
    depends_on:
      - auth-service
      - notification-service

  postgres-auth:
    container_name: postgres-auth
    hostname: postgres-auth
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${AUTH_DB_USERNAME}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_DB=${AUTH_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  movie-service:
    container_name: movie-service
    hostname: movie-service
    build:
      context: ./services/movie-service
      dockerfile: Dockerfile
    ports:
      - "50053:50053"
    volumes:
      - ./services/movie-service:/usr/src/app
    environment:
      - NODE_ENV=development
      - DB_HOST=${MOVIE_DB_HOST}
      - DB_PORT=${MOVIE_DB_PORT}
      - DB_USERNAME=${MOVIE_DB_USERNAME}
      - DB_PASSWORD=${MOVIE_DB_PASSWORD}
      - DB_NAME=${MOVIE_DB_NAME}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - test-network
    depends_on:
      - postgres-movie

  postgres-movie:
    container_name: postgres-movie
    hostname: postgres-movie
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=${MOVIE_DB_USERNAME}
      - POSTGRES_PASSWORD=${MOVIE_DB_PASSWORD}
      - POSTGRES_DB=${MOVIE_DB_NAME}
    volumes:
      - postgres_movie_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  seat-service:
    container_name: seat-service
    hostname: seat-service
    build:
      context: ./services/seat-service
      dockerfile: Dockerfile
    ports:
      - "50054:50054"
    volumes:
      - ./services/seat-service:/usr/src/app
    environment:
      - NODE_ENV=development
      - DB_HOST=${SEAT_DB_HOST}
      - DB_PORT=${SEAT_DB_PORT}
      - DB_USERNAME=${SEAT_DB_USERNAME}
      - DB_PASSWORD=${SEAT_DB_PASSWORD}
      - DB_NAME=${SEAT_DB_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
    networks:
      - test-network
    depends_on:
      - postgres-seat
      - redis

  postgres-seat:
    container_name: postgres-seat
    hostname: postgres-seat
    image: postgres:15-alpine
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=${SEAT_DB_USERNAME}
      - POSTGRES_PASSWORD=${SEAT_DB_PASSWORD}
      - POSTGRES_DB=${SEAT_DB_NAME}
    volumes:
      - postgres_seat_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis-ticket
    hostname: redis
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  test-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  postgres_movie_data:
  postgres_seat_data:
  redis_data:
